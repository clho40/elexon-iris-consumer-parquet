using System.Text;
using System.Text.RegularExpressions;
using Azure.Messaging.ServiceBus;
using Azure.Storage.Blobs;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Parquet.Serialization;

namespace ElexonInsightPolling;

public class MessageProcessors
{
    private readonly Settings _settings;

    public MessageProcessors(Settings settings)
    {
        _settings = settings;
    }

    public async Task DownloadHandler(ProcessMessageEventArgs args)
    {
        var dataset = args.Message.Subject ?? "unknown";
        var body = args.Message.Body.ToString();
        string rawJson = Regex.Unescape(body).Trim('"');
        if (string.IsNullOrWhiteSpace(rawJson))
        {
            return;
        }
        JArray jsonArray = JsonConvert.DeserializeObject<JArray>(rawJson);
        var stream = await convert_to_parquet(dataset, jsonArray);

        var filename = DateTime.Now.ToString("yyyy-MM-ddTHH-mm-ss_fff") + ".parquet";

        var blobServiceClient = new BlobServiceClient(_settings.StorageAccountConnectionString);
        var containerClient = blobServiceClient.GetBlobContainerClient(_settings.DatalakeContainerName);
        var blobClient = containerClient.GetBlobClient($"{filename}");

        try
        {
            blobClient.Upload(stream, true);
            await args.CompleteMessageAsync(args.Message);
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Unable to create file \"{filename}\":\n{e}");
        }

        // try
        // {
        //     using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(rawJson)))
        //     {
        //         blobClient.Upload(stream, true);
        //     }
        //     await args.CompleteMessageAsync(args.Message);
        // }
        // catch (Exception e)
        // {
        //     Console.Error.WriteLine($"Unable to create file \"{filename}\":\n{e}");
        // }
    }

    public async Task<MemoryStream> convert_to_parquet(string dataset, JArray jsonArray)
    {
        var data = new List<BMRA_RAW_ELEXON_IRIS>();
        foreach (var jsonObject in jsonArray)
        {
            var rawJsonItem = JsonConvert.SerializeObject(jsonObject);
            data.Add(new BMRA_RAW_ELEXON_IRIS
            {
                Dataset = dataset,
                Data = rawJsonItem
            });
        }
        var inMemoryStream = new System.IO.MemoryStream();
        await ParquetSerializer.SerializeAsync(data, inMemoryStream);
        return inMemoryStream;
    }

    public static Task ErrorHandler(ProcessErrorEventArgs args)
    {
        Console.WriteLine(args.Exception.ToString());
        return Task.CompletedTask;
    }
}

public class BMRA_RAW_ELEXON_IRIS
{
    public string Dataset { get; set; }
    public string Data { get; set; }
}
